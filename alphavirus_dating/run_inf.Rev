if (!exists("host_scenario")) {
    host_scenario = v("one_host_event",
                      "four_host_event")[2]
}
if (!exists("virus_scenario")) {
    virus_scenario = v("crown_SFV",
                       "crown_alpha")[2]
}
if (!exists("under_prior")) {
    under_prior = false
}
if (!exists("no_calib")) {
    no_calib = true
}
if (!exists("bound_max_age")) {
    bound_max_age = false
}
if (!exists("keep_third")) {
    keep_third = true
}
if (!exists("use_mc3")) {
    use_mc3 = false
    if (!exists("num_chains")) {
        num_chains = 5
    }
}

# IO
dat_str = "alpha"
dat_str += "." + floor(runif(1,100000,999999)[1])

fp     = "./"
mol_fn = [ "data/alpha.orf1.nex",
           "data/alpha.orf2.nex" ]
phy_fn = fp + "data/alpha.init.tre"
out_fn = fp + "output/" + dat_str

if (under_prior) {
    out_fn += ".under_prior"
}
print("Filename prefix: " + out_fn)


# settings
n_gen = 1e6
f_burn = 0.0
n_burn = floor(f_burn * n_gen)
print_gen = 1e1

# read data
# manage codon site partitions
k = 1
for (i in 1:mol_fn.size()) {
    mol_fn[i] = fp + mol_fn[i]
    tmp_1 <- readDiscreteCharacterData( mol_fn[i] )
    tmp_2 <- tmp_1
    tmp_3 <- tmp_1
    tmp_1.setCodonPartition( 1 )
    tmp_2.setCodonPartition( 2 )
    tmp_3.setCodonPartition( 3 )
    dat[k++] = tmp_1
    dat[k++] = tmp_2
    if (keep_third) {
        dat[k++] = tmp_3
    }
}

phy_init = readTrees(phy_fn)[1]
n_part = dat.size()

taxa = phy_init.taxa()
#taxa = dat[1].taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 2


# add missing taxa as needed
for (k in 1:n_part) {
    dat[k].addMissingTaxa( taxa )
}

# source tree model
source("model_tree.Rev")

# source molecular model
source("model_mol.Rev")


# attach data
for (k in 1:n_part) {
    seq[k].clamp(dat[k])
}

# moves
mvi = 1

# birth death prior
mv[mvi++] = mvScale(birth, weight=10)
mv[mvi++] = mvScale(death, weight=10)
mv[mvi++] = mvScale(rho, weight=10)

# base molecular clock
mv[mvi++] = mvScale(base_clock, lambda=0.5, weight=15, tuneTarget=0.3)
mv[mvi++] = mvScale(base_clock, lambda=1.0, weight=5, tuneTarget=0.03)

# tree topology
mv[mvi++] = mvNNI(phy, weight=n_branches/1)
mv[mvi++] = mvFNPR(phy, weight=n_branches/4)

# tree node ages (and branch rates)
mv[mvi++] = mvNodeTimeSlideBeta( phy, delta=10, weight=n_branches/4 )
mv[mvi++] = mvSubtreeScale(phy, weight=n_branches/4)
mv[mvi++] = mvNodeRateTimeSlideBeta( phy, branch_rate, delta=10, weight=n_branches/4 )
mv[mvi++] = mvNodeRateTimeSlideUniform( phy, branch_rate, weight=n_branches/4 )

# branch rates
for (i in 1:n_branches) {
    mv[mvi++] = mvScale( branch_rate[i], lambda=0.3, weight=2, tune=false )
    mv[mvi++] = mvScale( branch_rate[i], lambda=1.0, weight=1, tune=false )
}
mv[mvi++] = mvVectorScale( branch_rate, lambda=0.3, weight=20, tuneTarget=0.3 )
mv[mvi++] = mvVectorScale( branch_rate, lambda=1.0, weight=5, tuneTarget=0.03 )

# partition parameters
for (k in 1:n_part) {
    mv[mvi++] = mvScale(part_rate[k], lambda=0.3, weight=4)
    mv[mvi++] = mvScale(part_rate[k], lambda=1.0, weight=3)
    mv[mvi++] = mvBetaSimplex(bf[k], alpha=20, weight=5)
    mv[mvi++] = mvDirichletSimplex(bf[k], alpha=20, weight=5)
    mv[mvi++] = mvScale(kappa[k], weight=5)
    mv[mvi++] = mvScale(alpha[k], weight=5)
}
mv[mvi++] = mvVectorScale( part_rate, lambda=0.3, weight=20, tuneTarget=0.3 )
mv[mvi++] = mvVectorScale( part_rate, lambda=1.0, weight=5, tuneTarget=0.03 )

# up/down scaling moves for various rate parameters
mv0 = mvUpDownScale(lambda=0.3, weight=25, tuneTarget=0.3)
mv0.addVariable(base_clock, up=true)
mv0.addVariable(branch_rate, up=false)
mv[mvi++] = mv0
mv1 = mvUpDownScale(lambda=1.0, weight=10, tuneTarget=0.1)
mv1.addVariable(base_clock, up=true)
mv1.addVariable(branch_rate, up=false)
mv[mvi++] = mv1
mv2 = mvUpDownScale(lambda=0.3, weight=25, tuneTarget=0.3)
mv2.addVariable(base_clock, up=true)
mv2.addVariable(part_rate, up=false)
mv[mvi++] = mv2
mva = mvUpDownScale(lambda=1.0, weight=10, tuneTarget=0.1)
mva.addVariable(base_clock, up=true)
mva.addVariable(part_rate, up=false)
mv[mvi++] = mva
mvb = mvUpDownScale(lambda=0.3, weight=25, tuneTarget=0.3)
mvb.addVariable(part_rate, up=true)
mvb.addVariable(branch_rate, up=false)
mv[mvi++] = mvb
mvc = mvUpDownScale(lambda=1.0, weight=10, tuneTarget=0.1)
mvc.addVariable(part_rate, up=true)
mvc.addVariable(branch_rate, up=false)
mv[mvi++] = mvc

# monitors
mni = 1
mn[mni++] = mnScreen(root_age, printgen=print_gen)
mn[mni++] = mnModel(printgen=print_gen, file=out_fn + ".model.log")
mn[mni++] = mnFile(phy, printgen=print_gen, file=out_fn + ".tre")

# MCMC
mdl = model(phy)
if (use_mc3) {
    ch = mcmcmc(mdl, mv, mn, nchains=num_chains, swapInterval=1, deltaHeat=0.03)
} else {
    ch = mcmc(mdl, mv, mn, nruns=1)
}
n_burn = 1e3
#ch.burnin(n_burn, underPrior=under_prior, tuningInterval=10)
ch.run(n_gen, underPrior=under_prior)

# MCC tree
tree_trace = readTreeTrace( file=out_fn+".tre",
                            treetype="clock",
                            burnin=0.5 )

mcc_tree = mccTree( trace=tree_trace, file=out_fn+".mcc.tre", positiveBranchLengths=true )

# done!
#q()
