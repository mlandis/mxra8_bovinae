fp = "/Users/mlandis/projects/mxra8_bovinae/analyses/mxra8_gene_tree/"
out_fp = fp + "output/"
mol_fn = fp + "Mxra8.bovinae.complete.fas"
#mol_fn = dat_fp + "Mxra8_in_BovineGenomes/bovinae_trim_spp.fas"
#mol_fn = dat_fp + "mxra8.fasta"
#out_fn = out_fp + "mxra8.out.fasta.best.fas"
out_fn = out_fp + "mxra8.gene_tree.fas"
#out_fn = out_fp + "mxra8.out.fasta.best.fas"

dat = readDiscreteCharacterData(mol_fn)
for (i in 1:3) {
    dat_part[i] = dat
    dat_part[i].setCodonPartition(i)
}

taxa = dat.taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 3

mvi = 1
mni = 1


#outgroup = clade("Equus_caballus_Mxra8_XM_023636045",
#"Mus_musculus_Mxra8_NM_024263",
#"Canis_lupus_familiaris_Mxra8_XM_546712")
outgroup = clade("Boselaphus_tragocamelus")

topology ~ dnUniformTopology( taxa=taxa, outgroup=outgroup )
mv[mvi++] = mvNNI(topology, weight=n_branches)
mv[mvi++] = mvSPR( topology, weight=n_branches/4)


bl_prop ~ dnDirichlet( rep(1, n_branches) )
mv[mvi++] = mvSimplex( bl_prop, alpha=20, weight=n_branches/2 )
mv[mvi++] = mvSimplexElementScale( bl_prop, alpha=20, weight=n_branches )

tl ~ dnExp(0.1)
mv[mvi++] = mvScale(tl, weight=5, lambda=1)
mv[mvi++] = mvScale(tl, weight=10, lambda=0.2)

bl := bl_prop * tl
#for (i in 1:n_branches) {
#    bl[i] := bl_prop[i] * tl
    #bl[i] ~ dnExp(100)
    #mv[mvi++] = mvScale(bl[i])
#}
phylogeny := treeAssembly(topology, bl)

alpha ~ dnExp(10)
site_rates := fnDiscretizeGamma(alpha, alpha, 4)
mv[mvi++] = mvScale(alpha, weight=3)

sdlog = 0.5
meanlog = ln(1) - 0.5 * sdlog^2
bf ~ dnDirichlet( [1,1,1,1] )
er ~ dnDirichlet( [1,1,1,1,1,1] )
mv[mvi++] = mvSimplex( bf, alpha=20, weight=3 )
mv[mvi++] = mvSimplex(er, alpha=20, weight=4)

Q := fnGTR(er,bf)

for (i in 1:3) {
    if (i == 1) {
        rate_mult[i] <- 1.0
    } else {
        rate_mult[i] ~ dnLognormal(meanlog, sdlog)
        mv[mvi++] = mvScale( rate_mult[i], lambda=1, weight=2 )
    }
    if (!true){
        #bf[i] ~ dnDirichlet( [1,1,1,1] )
        #kappa[i] ~ dnLognormal( meanlog, sdlog )
        #er[i] ~ dnDirichlet( [1,1,1,1,1,1] )
        #mv[mvi++] = mvSimplex( bf[i], alpha=20, weight=3 )
        #mv[mvi++] = mvScale(kappa[i], lambda=1, weight=2 )
        #mv[mvi++] = mvSimplex(er[i], alpha=20, weight=4)

        #Q[i] := fnGTR(er[i], bf[i])
        #Q[i] := fnHKY(bf[i], kappa[i])
    }


    seq[i] ~ dnPhyloCTMC( Q=Q,
                       tree=phylogeny,
                       branchRates=rate_mult[i],
                       siteRates=site_rates )
    seq[i].clamp(dat_part[i])
}

mn[mni++] = mnScreen( alpha )
mn[mni++] = mnModel( file=out_fn + ".model.log", printgen=10)
mn[mni++] = mnFile(phylogeny, file=out_fn + ".tre", printgen=10)

mdl = model(Q)

ch = mcmc(mv, mn, mdl)
ch.run(5000)

tree_trace = readTreeTrace(file=out_fn+".tre", burnin=0.25)
mcc_tree = mccTree(trace=tree_trace, file=out_fn+".mcc.tre", positiveBranchLengths=true)
mrc_tree = conTree(trace=tree_trace, file=out_fn+".con.tre", positiveBranchLengths=true)
quit()




