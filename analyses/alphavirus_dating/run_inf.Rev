if (!exists("drop_weev")) {
    drop_weev = !false
}
if (!exists("one_per")) {
    one_per = false
}

if (!exists("host_scenario")) {
    host_scenario = v("one_host_event",
                      "four_host_event")[2]
}
if (!exists("virus_scenario")) {
    virus_scenario = v("crown_SFV",
                       "crown_alpha")[2]
}
if (!exists("use_empirical_clock")) {
    use_empirical_clock = !true
}
if (!exists("bound_max_age")) {
    bound_max_age = false
}
if (!exists("under_prior")) {
    under_prior = false
}
if (!exists("no_calib")) {
    no_calib = !false
}
if (!exists("update_root")) {
    update_root = !true
}
if (!exists("keep_third")) {
    keep_third = !true
}


# IO
dat_str = "alpha_catorce"
dat_str += "." + floor(runif(1,100000,999999)[1])

fp = "/Users/mlandis/projects/mxra8_bovinae/analyses/alphavirus_dating/"
mol_fn = [ "data/alpha.orf1.nex",
           "data/alpha.orf2.nex" ]
phy_fn = fp + "data/alpha.init.tre"
out_fn = fp + "output/" + dat_str
out_fn += "." + virus_scenario
out_fn += "." + host_scenario
if (bound_max_age) { 
    out_fn += ".bound_max_age"
}
if (use_empirical_clock) {
    out_fn += ".use_empirical_clock"
}
if (no_calib) {
    out_fn += ".no_calib"
}
if (!update_root) {
    out_fn += ".fix_root"
}
if (drop_weev) {
    phy_fn = fp + "data/alpha.drop_weev.init.tre"
    out_fn += ".drop_weev"
}
if (one_per) {
    phy_fn = fp + "data/alpha.one_per.init.tre"
    out_fn += ".one_per"
}
if (keep_third) {
    out_fn += ".keep_third"
}
if (under_prior) {
    out_fn += ".under_prior"
}
print("Filename: " + out_fn)


# settings
n_gen = 5e4
f_burn = 0.0
n_burn = floor(f_burn * n_gen)
print_gen = 1e1

# read data
# manage codon site partitions
k = 1
for (i in 1:mol_fn.size()) {
    mol_fn[i] = fp + mol_fn[i]
    tmp_1 = readDiscreteCharacterData( mol_fn[i] )
    tmp_2 = tmp_1
    tmp_3 = tmp_1
    tmp_1.setCodonPartition( 1 )
    tmp_2.setCodonPartition( 2 )
    tmp_3.setCodonPartition( 3 )
    dat[k++] = tmp_1
    dat[k++] = tmp_2
    if (keep_third) {
        dat[k++] = tmp_3
    }
    #dat[i][1] = tmp_12
    #dat[i][2] = tmp_3
}
phy_init = readTrees(phy_fn)[1]
n_part = dat.size()

taxa = phy_init.taxa()
#taxa = dat[1].taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 2


# add missing taxa as needed
for (k in 1:n_part) {
    dat[k].addMissingTaxa( taxa )
}

# source tree model
source("model_tree.Rev")

# source molecular model
source("model_mol.Rev")


# attach data
for (k in 1:n_part) {
    seq[k].clamp(dat[k])
}

# moves
mvi = 1
mv[mvi++] = mvScale(birth, weight=20)
mv[mvi++] = mvScale(death, weight=20)
mv[mvi++] = mvScale(rho, weight=20)
if (update_root) {
    mv[mvi++] = mvScale(root_age, weight=20)
}

mv[mvi++] = mvNNI(phy, weight=n_branches/2)
mv[mvi++] = mvFNPR(phy, weight=n_branches/8)
mv[mvi++] = mvNodeTimeSlideUniform(phy, weight=n_branches*1.5)

mv[mvi++] = mvScale(base_clock, lambda=0.2, weight=8)
mv[mvi++] = mvScale(base_clock, lambda=1.0, weight=2)
#mv[mvi++] = mvScale(ucln_sd, lambda=0.2, weight=8)
#mv[mvi++] = mvScale(ucln_sd, lambda=1.0, weight=2)
for (i in 1:n_branches) {
    #mv[mvi++] = mvMixtureAllocation(branch_rate[i], delta=step_size)
    mv[mvi++] = mvScale( branch_rate[i], lambda=0.3, weight=0.75 )
    mv[mvi++] = mvScale( branch_rate[i], lambda=1.0, weight=0.25 )
}
#mv[mvi++] = mvRateAgeBetaShift(phy, branch_rate, weight=n_branches)
if (true) {
    mv1 = mvUpDownScale(lambda=0.2, weight=20)
    mv1.addVariable(base_clock, up=true)
    mv1.addVariable(branch_rate, up=false)
    mv[mvi++] = mv1
    mv2 = mvUpDownScale(lambda=1.0, weight=10)
    mv2.addVariable(base_clock, up=true)
    mv2.addVariable(branch_rate, up=false)
    mv[mvi++] = mv2

    if (update_root) {
        mv3 = mvUpDownScale(lambda=0.2, weight=20)
        mv3.addVariable(base_clock, up=true)
        mv3.addVariable(phy, up=false)
        mv[mvi++] = mv3
        mv4 = mvUpDownScale(lambda=1.0, weight=10)
        mv4.addVariable(base_clock, up=true)
        mv4.addVariable(phy, up=false)
        mv[mvi++] = mv4
        mv5 = mvUpDownScale(lambda=0.2, weight=20)
        mv5.addVariable(branch_rate, up=true)
        mv5.addVariable(phy, up=false)
        mv[mvi++] = mv5
        mv6 = mvUpDownScale(lambda=1.0, weight=10)
        mv6.addVariable(branch_rate, up=true)
        mv6.addVariable(phy, up=false)
        mv[mvi++] = mv6
    }
}

for (k in 1:n_part) {
    if (k != 1) {
        mv[mvi++] = mvScale(part_rate[k], lambda=0.2, weight=2)
        mv[mvi++] = mvScale(part_rate[k], lambda=1.0, weight=1)
    }
    mv[mvi++] = mvBetaSimplex(bf[k], alpha=10, weight=2)
    mv[mvi++] = mvDirichletSimplex(bf[k], alpha=10, weight=1)
    mv[mvi++] = mvScale(kappa[k], weight=2)
    mv[mvi++] = mvScale(alpha[k], weight=2)
}

# monitors
mni = 1
mn[mni++] = mnScreen(root_age, printgen=print_gen)
mn[mni++] = mnModel(printgen=print_gen, file=out_fn + ".model.log")
mn[mni++] = mnFile(phy, printgen=print_gen, file=out_fn + ".tre")

# MCMC
mdl = model(phy)
ch = mcmc(mdl, mv, mn, nruns=1)
#ch.burnin(n_burn, tuningInterval=10, underPrior=under_prior)
ch.run(n_gen, underPrior=under_prior)

# MCC tree
tree_trace = readTreeTrace( file=out_fn+".tre",
                            treetype="clock",
                            burnin=0.5 )

mcc_tree = mccTree( trace=tree_trace, file=out_fn+".mcc.tre", positiveBranchLengths=true )

# done!
#q()
